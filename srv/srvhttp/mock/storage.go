// Code generated by MockGen. DO NOT EDIT.
// Source: srvhttp/deps.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "github.com/akhripko/auth2-jwt/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockStorage) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockStorageMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockStorage)(nil).Check))
}

// ReadAccountConfig mocks base method
func (m *MockStorage) ReadAccountConfig(account string) (models.AccountConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccountConfig", account)
	ret0, _ := ret[0].(models.AccountConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccountConfig indicates an expected call of ReadAccountConfig
func (mr *MockStorageMockRecorder) ReadAccountConfig(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccountConfig", reflect.TypeOf((*MockStorage)(nil).ReadAccountConfig), account)
}
